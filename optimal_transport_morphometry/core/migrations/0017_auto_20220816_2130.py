# Generated by Django 3.2.15 on 2022-08-16 21:30

from django.db import migrations, models
import django.db.models.deletion
import django_extensions.db.fields


def create_default_preprocessing_batch(apps, schema_editor):
    # Create dummy user to associate dummy dataset to
    User = apps.get_model('auth', 'User')
    user = User.objects.create(id=0, username='migration__dummy__user')

    # Create dummy dataset to associate dummy preprocessing batch to
    Dataset = apps.get_model('core', 'Dataset')
    dataset = Dataset.objects.create(id=0, owner=user)

    # Create dummy preprocessing batch
    PreprocessingBatch = apps.get_model('core', 'PreprocessingBatch')
    PreprocessingBatch.objects.create(id=0, dataset=dataset)


def ensure_preprocessing_batch(apps, schema_editor):
    PreprocessingBatch = apps.get_model('core', 'PreprocessingBatch')
    Dataset = apps.get_model('core', 'Dataset')
    Image = apps.get_model('core', 'Image')

    # Preprocessed images
    FeatureImage = apps.get_model('core', 'FeatureImage')
    JacobianImage = apps.get_model('core', 'JacobianImage')
    RegisteredImage = apps.get_model('core', 'RegisteredImage')
    SegmentedImage = apps.get_model('core', 'SegmentedImage')

    # Iterate over each dataset and grab all preprocessed images,
    # creating one preprocessing batch per dataset
    for dataset in Dataset.objects.iterator():
        batch = PreprocessingBatch.objects.create(dataset=dataset)
        dataset.current_preprocessing_batch = batch
        dataset.save()

        # Do for each preprocessed image model
        images = Image.objects.filter(dataset=dataset)
        classes = [FeatureImage, JacobianImage, RegisteredImage, SegmentedImage]
        for cls in classes:
            cls.objects.filter(source_image__in=images).update(preprocessing_batch=batch)

    # Remove earlier added default preprocessing batch
    # Deleting the user will cascade to the dataset and batch
    User = apps.get_model('auth', 'User')
    User.objects.filter(id=0).delete()


class Migration(migrations.Migration):

    dependencies = [
        ('core', '0016_auto_20220812_1756'),
    ]

    operations = [
        migrations.RemoveField(
            model_name='dataset',
            name='preprocessing_status',
        ),
        migrations.CreateModel(
            name='PreprocessingBatch',
            fields=[
                (
                    'id',
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name='ID'
                    ),
                ),
                (
                    'created',
                    django_extensions.db.fields.CreationDateTimeField(
                        auto_now_add=True, verbose_name='created'
                    ),
                ),
                (
                    'modified',
                    django_extensions.db.fields.ModificationDateTimeField(
                        auto_now=True, verbose_name='modified'
                    ),
                ),
                (
                    'status',
                    models.CharField(
                        choices=[
                            ('Pending', 'Pending'),
                            ('Running', 'Running'),
                            ('Finished', 'Finished'),
                            ('Failed', 'Failed'),
                        ],
                        default='Pending',
                        max_length=32,
                    ),
                ),
                ('error_message', models.TextField(blank=True, default='')),
                (
                    'dataset',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='preprocessing_batches',
                        to='core.dataset',
                    ),
                ),
            ],
            options={
                'get_latest_by': 'modified',
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='dataset',
            name='current_preprocessing_batch',
            field=models.OneToOneField(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name='+',
                to='core.preprocessingbatch',
            ),
        ),
        migrations.RunPython(create_default_preprocessing_batch, migrations.RunPython.noop),
        migrations.AddField(
            model_name='featureimage',
            name='preprocessing_batch',
            field=models.ForeignKey(
                default=0,
                on_delete=django.db.models.deletion.CASCADE,
                related_name='core_featureimage',
                to='core.preprocessingbatch',
            ),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='jacobianimage',
            name='preprocessing_batch',
            field=models.ForeignKey(
                default=0,
                on_delete=django.db.models.deletion.CASCADE,
                related_name='core_jacobianimage',
                to='core.preprocessingbatch',
            ),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='registeredimage',
            name='preprocessing_batch',
            field=models.ForeignKey(
                default=0,
                on_delete=django.db.models.deletion.CASCADE,
                related_name='core_registeredimage',
                to='core.preprocessingbatch',
            ),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='segmentedimage',
            name='preprocessing_batch',
            field=models.ForeignKey(
                default=0,
                on_delete=django.db.models.deletion.CASCADE,
                related_name='core_segmentedimage',
                to='core.preprocessingbatch',
            ),
            preserve_default=False,
        ),
        # Run to create default preprocessing batch for each current dataset
        migrations.RunPython(ensure_preprocessing_batch, migrations.RunPython.noop),
    ]
