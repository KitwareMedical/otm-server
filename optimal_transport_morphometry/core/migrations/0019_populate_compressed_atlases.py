# Generated by Django 3.2.15 on 2022-08-17 21:46
from pathlib import Path

from django.core.files.uploadedfile import SimpleUploadedFile
from django.db import migrations

project_dir = Path(__file__).parent.parent.parent.parent
atlases_dir = project_dir / 'sample_data' / 'atlases'


def populate_compressed_atlases(apps, schema_editor):
    Atlas = apps.get_model('core', 'Atlas')
    for atlas_file in atlases_dir.glob('*.nii.gz'):
        with open(atlas_file, 'rb') as f:
            Atlas.objects.create(
                name=atlas_file.name,
                blob=SimpleUploadedFile(name=atlas_file.name, content=f.read()),
            )


def migrate_atlases(apps, schema_editor):
    Atlas = apps.get_model('core', 'Atlas')
    FeatureImage = apps.get_model('core', 'FeatureImage')
    JacobianImage = apps.get_model('core', 'JacobianImage')
    RegisteredImage = apps.get_model('core', 'RegisteredImage')
    SegmentedImage = apps.get_model('core', 'SegmentedImage')

    # Run for each preprocessed image class
    classes = [FeatureImage, JacobianImage, RegisteredImage, SegmentedImage]
    for cls in classes:
        objs = cls.objects.select_related('atlas').filter(atlas__name__endswith='.nii')

        # Obj is a preprocessed image that's atlas is uncompressed
        for obj in objs:
            # Find compressed atlas if possible
            matching = Atlas.objects.filter(name=f'{obj.atlas.name}.gz').first()

            # Set to uncompressed
            if matching is not None:
                obj.atlas = matching
                obj.save()


class Migration(migrations.Migration):
    dependencies = [
        ('core', '0018_dataset_analysis_result'),
    ]

    operations = [
        migrations.RunPython(populate_compressed_atlases, migrations.RunPython.noop),
        migrations.RunPython(migrate_atlases, migrations.RunPython.noop),
    ]
